---
# tasks file for pxe
- name: install pxe pre-requisite packages 
  yum:
    name: ['tftp-server', 'xinetd', 'syslinux']
    state: latest

- name: enable services
  systemd:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
    - xinetd
    - tftp

- name: add firewalld service for tftp
  firewalld:
    service: tftp
    permanent: yes
    immediate: yes
    state: enabled

- name: update dhcpd config file with pxe details
  blockinfile:
    path: /etc/dhcp/dhcpd.conf
    insertafter: "subnet"
    block: "{{ lookup('template', 'pxe.config.j2') }}"
  notify: "restart dhcp"

- name: create required directories for pxe uefi/bios
  file:
     path: "/var/lib/tftpboot/{{ item }}"
     state: directory
  with_items:
    - uefi
    - rhcos
    - rhcos/{{ version }}
    - rhel
    - bios
    - bios/pxelinux.cfg
    - bios/rhcos
    - bios/rhcos/{{ version }}

- name: copy required files for pxe uefi/bios
  copy:
    src: "{{ item.src }}"
    dest: "/var/lib/tftpboot/{{ item.dest }}"
    remote_src: yes
  with_items:
    - { src: "{{ software_src }}/{{ kernel_file }}", dest: "rhcos/{{ version }}/{{ kernel_file }}" }
    - { src: "{{ software_src }}/{{ initramfs }}", dest: "rhcos/{{ version }}/{{ initramfs }}" }
    - { src: "{{ software_src }}/{{ rootfs }}", dest: "rhcos/{{ version }}/{{ rootfs }}" }
    - { src: /boot/efi/EFI/redhat/shimx64.efi, dest: uefi/shim.efi }
    - { src: /boot/efi/EFI/redhat/grubx64.efi, dest: uefi/grubx64.efi }
    - { src: /var/www/html/rhel/images/pxeboot/vmlinuz, dest: rhel/vmlinuz }
    - { src: /var/www/html/rhel/images/pxeboot/initrd.img, dest: rhel/initrd.img }
    - { src: /var/www/html/rhel/isolinux/vesamenu.c32, dest: bios/vesamenu.c32 }
    - { src: /usr/share/syslinux/pxelinux.0, dest: bios/pxelinux.0 }
    - { src: "{{ software_src }}/{{ kernel_file }}", dest: "bios/rhcos/{{ version }}/{{ kernel_file }}" }
    - { src: "{{ software_src }}/{{ initramfs }}", dest: "bios/rhcos/{{ version }}/{{ initramfs }}" }
    - { src: "{{ software_src }}/{{ rootfs }}", dest: "bios/rhcos/{{ version }}/{{ rootfs }}" }
    

- name: display network cidr
  set_fact:
    net_mask: "{{ ansible_default_ipv4.network }}/{{ ansible_default_ipv4.netmask }}"

- name: display cidr
  set_fact:
    net_mask_cidr: "{{ net_mask | ipaddr('prefix') }}"

- name: get worker nodes details
  set_fact:
    nodes: "{{ hostvars[inventory_hostname]['compute_nodes'] }}"
  when: cluster_install == '6+ node'

- name: dispay compute node names
  debug:
    msg: "{{ item.name }}"
  loop: "{{ nodes }}"
  when: cluster_install == '6+ node'

- name: dispay rhel compute node names
  debug:
    msg: "{{ item.name }}"
  loop: "{{ nodes }}"
  when: cluster_install == '6+ node' and item.os == 'rhel'

- name: generate kickstart files
  template:
    src: ks.j2
    dest: /var/www/html/kickstart/{{ item.name }}.ks.cfg
  loop: "{{ nodes }}"
  when: cluster_install == '6+ node' and item.os == 'rhel'

- name: generate pxe menu grub.cfg file
  template:
    src: menu.j2
    dest: /var/lib/tftpboot/uefi/grub.cfg
    mode: 0755

- name: generate pxe menu bios menu
  template:
    src: default.j2
    dest: /var/lib/tftpboot/bios/pxelinux.cfg/default
    mode: 0755

- name: create tftp file under /etc/xinetd.d
  copy:
    dest: "/etc/xinetd.d/tftp"
    content: |
      service tftp
      {
         socket_type     = dgram
         protocol        = udp
         wait            = yes
         user            = root
         server          = /usr/sbin/in.tftpd
         server_args     = -s /var/lib/tftpboot
         disable         = no
      }
  notify: "restart xinetd"
